<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />

    @* [수정] 로컬 파일 대신 안정적인 CDN을 사용하도록 변경합니다. *@
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="MyGtdApp.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="InteractiveServer" />
</head>

<body>
    <Router AppAssembly="typeof(Program).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="routeData"
                       DefaultLayout="typeof(Layout.MainLayout)" />
            <FocusOnNavigate RouteData="routeData" Selector="h1" />
        </Found>
    </Router>

    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script>
        Blazor.start({
            reconnectionOptions: {
                maxRetries: 50,
                retryIntervalMilliseconds: 2000
            },
            configureSignalR: function (builder) {
                builder.withServerTimeout(120000)
                       .withKeepAliveInterval(30000);
            }
        }).then(() => {
            let reconnectDelayTimer = null;
            let isFirstReconnectAttempt = true;

            // 🆕 모바일/데스크톱 감지
            const isMobile = () => {
                return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
                       || window.innerWidth <= 1199;
            };

            // 🆕 연결 상태에 따른 지연 시간 계산
            const getDelayTime = () => {
                if (isMobile()) {
                    return isFirstReconnectAttempt ? 12000 : 8000; // 모바일: 첫 시도 12초, 이후 8초
                } else {
                    return isFirstReconnectAttempt ? 8000 : 5000;  // 데스크톱: 첫 시도 8초, 이후 5초
                }
            };

            // ✅ 안전한 접근으로 수정
            if (Blazor.defaultReconnectionHandler && Blazor.defaultReconnectionHandler._reconnectionDisplay) {
                // 재연결 UI 지연 표시
                const originalShow = Blazor.defaultReconnectionHandler._reconnectionDisplay.show;
                Blazor.defaultReconnectionHandler._reconnectionDisplay.show = function() {
                    const delayTime = getDelayTime();

                    console.log(`[RECONNECT] ${delayTime/1000}초 후 재연결 UI 표시 예정 (${isMobile() ? '모바일' : '데스크톱'})`);

                    reconnectDelayTimer = setTimeout(() => {
                        if (originalShow) {
                            console.log('[RECONNECT] 재연결 UI 표시');
                            originalShow.call(this);
                        }
                    }, delayTime);

                    isFirstReconnectAttempt = false;
                };

                // 재연결 성공 시 타이머 취소 및 상태 리셋
                const originalHide = Blazor.defaultReconnectionHandler._reconnectionDisplay.hide;
                Blazor.defaultReconnectionHandler._reconnectionDisplay.hide = function() {
                    if (reconnectDelayTimer) {
                        clearTimeout(reconnectDelayTimer);
                        reconnectDelayTimer = null;
                    }
                    if (originalHide) originalHide.call(this);

                    // 🆕 성공적으로 연결되면 다음번을 위해 리셋
                    isFirstReconnectAttempt = true;
                    console.log('[RECONNECT] 재연결 성공 - 상태 리셋');
                };
            }

            // 🆕 탭 활성화 감지 개선
            document.addEventListener('visibilitychange', function() {
                if (!document.hidden) {
                    console.log('[RECONNECT] 탭이 다시 활성화됨');

                    // 모바일에서는 더 여유롭게 기다림
                    const graceTime = isMobile() ? 3000 : 1000;

                    setTimeout(() => {
                        if (Blazor.defaultReconnectionHandler &&
                            Blazor.defaultReconnectionHandler._currentReconnectionProcess) {
                            console.log('[RECONNECT] 재연결이 필요한 상황 - 페이지 새로고침');
                            document.location.reload();
                        }
                    }, graceTime);
                }
            });

            // 최종 실패 시 자동 새로고침
            if (Blazor.defaultReconnectionHandler) {
                Blazor.defaultReconnectionHandler._reconnectCallback = function (d) {
                    console.log('[RECONNECT] 최종 실패 - 페이지 새로고침');
                    document.location.reload();
                };
            }
        }).catch(error => {
            console.error('Blazor 시작 실패:', error);
        });
    </script>

    <script src="js/download-helper.js"></script>
    <script src="js/modal-utils.js"></script>
    <!-- 기존 스크립트들 뒤에 추가 -->
    <script src="js/home-handlers.js"></script>
</body>

</html>
