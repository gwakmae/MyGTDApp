@page "/"
@page "/focus"
@page "/context/{Context}"
@* ✨ 추가: Active Tasks 뷰를 위한 라우트 *@
@page "/active"
@rendermode InteractiveServer

@using MyGtdApp.Models
@using MyGtdApp.Services
@using MyGtdApp.Components.Shared
@using Microsoft.AspNetCore.Components.Web
@using TaskStatus = MyGtdApp.Models.TaskStatus
@using MyGtdApp.Components.Pages

@implements IAsyncDisposable

<PageTitle>@pageTitle</PageTitle>

<div class="home-container" @onclick="HandleContainerClick" @onclick:stopPropagation="false">

    @* --- 1. Board View --- *@
    @if (IsBoardView)
    {
        <div class="main-header modern-header">
            <div class="header-content">
                <div class="header-left">
                    <div class="app-logo">
                        <div class="logo-icon">
                            <i class="bi bi-kanban"></i>
                        </div>
                        <div class="logo-text">
                            <h1 class="app-title">GTD Board</h1>
                            <span class="app-subtitle">Getting Things Done</span>
                        </div>
                    </div>
                </div>

                <div class="header-center">
                    <div class="header-stats">
                        @* ✨ 수정: div를 a 태그로 변경하고 href="/active" 추가 *@
                        <a href="active" class="stat-item-link">
                            <div class="stat-item">
                                <span class="stat-number">@GetActiveLeafTasksCount()</span>
                                <span class="stat-label">Active Tasks</span>
                            </div>
                        </a>
                        <div class="stat-divider"></div>
                        <div class="stat-item">
                            <span class="stat-number">@todayTasks.Count</span>
                            <span class="stat-label">Today</span>
                        </div>
                        <div class="stat-divider"></div>
                        <a href="focus" class="stat-item-link">
                            <div class="stat-item">
                                <span class="stat-number">@focusTasks.Count</span>
                                <span class="stat-label">Focus</span>
                            </div>
                        </a>
                    </div>
                </div>

                <div class="header-right">
                    <DataManager class="data-manager board-header" />

                    @* --- ▼ 전역 Undo 버튼 추가 (데스크톱 보드 뷰) ▼ --- *@
                    <button class="btn btn-modern global-undo-btn" @onclick="UndoService.UndoLatestAsync" disabled="@(!canUndo)" title="실행 취소">
                        <i class="bi bi-arrow-counterclockwise"></i>
                    </button>

                    <button class="btn btn-modern btn-hide-completed"
                            title="@(hideCompleted ? "Show completed tasks" : "Hide completed tasks")"
                            @onclick="ToggleHideCompleted">
                        <i class="bi @(hideCompleted ? "bi-eye" : "bi-eye-slash")"></i>
                        <span class="btn-text">@(hideCompleted ? "Show" : "Hide")</span>
                    </button>
                    <button class="btn btn-modern btn-toggle-hidden @(showHidden ? "active" : "")"
                            title="@(showHidden ? "Hide hidden tasks" : "Show hidden tasks")"
                            @onclick="ToggleShowHidden">
                        <i class="bi @(showHidden ? "bi-eye-fill" : "bi-eye-slash-fill")"></i>
                        <span class="btn-text">Hidden</span>
                    </button>
                </div>
            </div>
        </div>

        @if (isMultiSelectMode)
        {
            <div class="mobile-multiselect-indicator">
                <i class="bi bi-check-square"></i>
                <span>다중 선택 모드 - 더블탭으로 해제</span>
            </div>
        }

        <div @ref="boardContainerElement" class="board-container @(draggedTaskId != 0 ? "is-dragging" : "")">
            <div class="board-column today-column">
                <h3 class="column-header">Today</h3>
                <div class="task-list">
                    @foreach (var task in FilterTasks(todayTasks))
                    {
                        <ProjectTaskNode @key="task.Id"
                                         Task="task"
                                         IsSelected="selectedTaskIds.Contains(task.Id)"
                                         IsMultiSelectModeActive="isMultiSelectMode"
                                         SelectedCount="selectedTaskIds.Count"
                                         SelectedTaskIds="selectedTaskIds"
                                         OnClick="(args) => HandleTaskClick(args.taskId, args.e)"
                                         HideCompleted="hideCompleted"
                                         ShowHidden="showHidden"
                                         OnTaskAdded="HandleTaskAdded"
                                         OnTaskDeleted="HandleDeleteTask"
                                         OnTaskUpdated="HandleUpdateTask"
                                         OnTaskDragStart="HandleDragStart"
                                         OnTaskDragEnd="HandleDragEnd"
                                         OnTaskDropped="args => HandleDropOnProject(args.targetTaskId, args.position)"
                                         OnTaskCompletedToggle="HandleToggleComplete"
                                         OnTaskDoubleClick="ShowEditModal"
                                         DraggedTaskId="draggedTaskId" />
                    }
                </div>
            </div>

            @foreach (var status in (TaskStatus[])Enum.GetValues(typeof(TaskStatus)))
            {
                <div class="board-column @(status == TaskStatus.NextActions || status == TaskStatus.Projects ? "resizable" : "") @(status == TaskStatus.Projects ? "project-column" : "") @GetColumnDropClass(status)"
                     @ondrop="() => HandleDropOnColumn(status)"
                     @ondragover:preventDefault="true"
                     @ondragover="() => dragOverStatus = status"
                     @ondragleave="() => dragOverStatus = null">

                    @if (status == TaskStatus.Completed)
                    {
                        <div class="column-header-with-action">
                            <h3 class="column-header">@status</h3>
                            <button class="btn-clear-completed"
                                    @onclick="HandleClearCompleted"
                                    title="Clear all completed tasks">
                                <i class="bi bi-trash3"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <h3 class="column-header">@status</h3>
                    }

                    <div class="task-list">
                        @foreach (var task in FilterTasks(GetTasksForStatus(status)))
                        {
                            <ProjectTaskNode @key="task.Id"
                                             Task="task"
                                             IsSelected="selectedTaskIds.Contains(task.Id)"
                                             IsMultiSelectModeActive="isMultiSelectMode"
                                             SelectedCount="selectedTaskIds.Count"
                                             SelectedTaskIds="selectedTaskIds"
                                             OnClick="(args) => HandleTaskClick(args.taskId, args.e)"
                                             HideCompleted="hideCompleted"
                                             ShowHidden="showHidden"
                                             OnTaskAdded="HandleTaskAdded"
                                             OnTaskDeleted="HandleDeleteTask"
                                             OnTaskUpdated="HandleUpdateTask"
                                             OnTaskDragStart="HandleDragStart"
                                             OnTaskDragEnd="HandleDragEnd"
                                             OnTaskDropped="args => HandleDropOnProject(args.targetTaskId, args.position)"
                                             OnTaskCompletedToggle="HandleToggleComplete"
                                             OnTaskDoubleClick="ShowEditModal"
                                             DraggedTaskId="draggedTaskId" />
                        }
                    </div>

                    @if (addingTaskStatus == status)
                    {
                        <div class="quick-add-container">
                            <input @ref="quickAddInputRef"
                                   @bind="newTaskTitle"
                                   @onkeyup="(e) => HandleQuickAddKeyUp(e, status)"
                                   @onblur="() => HandleQuickAddBlur(status)"
                                   placeholder="Enter a title..."
                                   class="form-control" />
                        </div>
                    }
                    else
                    {
                        <button class="add-task-btn" @onclick="() => ShowQuickAdd(status)">+ Add Task</button>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <div class="main-header">
            <h1>@pageTitle</h1>
            <div class="ms-auto d-flex gap-2">

                @* --- ▼ 전역 Undo 버튼 추가 (리스트 뷰) ▼ --- *@
                <button class="btn btn-light global-undo-btn" @onclick="UndoService.UndoLatestAsync" disabled="@(!canUndo)" title="실행 취소">
                    <i class="bi bi-arrow-counterclockwise"></i>
                </button>

                <button class="btn btn-outline-secondary"
                        title="Hide / Show completed tasks"
                        @onclick="ToggleHideCompleted">
                    <i class="bi @(hideCompleted ? "bi-eye" : "bi-eye-slash")"></i>
                    @(hideCompleted ? "Show" : "Hide") Completed
                </button>
                <button class="btn btn-outline-secondary @(showHidden ? "active" : "")"
                        title="@(showHidden ? "Hide hidden tasks" : "Show hidden tasks")"
                        @onclick="ToggleShowHidden">
                    <i class="bi @(showHidden ? "bi-eye-fill" : "bi-eye-slash-fill")"></i>
                    @(showHidden ? "Showing Hidden" : "Show Hidden")
                </button>
            </div>
        </div>

        <div class="list-view-container">
            @{
                var tasksToShow = GetTasksToShow();
            }

            @if (tasksToShow.Any())
            {
                @foreach (var task in tasksToShow)
                {
                    <ProjectTaskNode @key="task.Id"
                                     Task="task"
                                     IsSelected="selectedTaskIds.Contains(task.Id)"
                                     IsMultiSelectModeActive="isMultiSelectMode"
                                     SelectedCount="selectedTaskIds.Count"
                                     SelectedTaskIds="selectedTaskIds"
                                     OnClick="(args) => HandleTaskClick(args.taskId, args.e)"
                                     HideCompleted="hideCompleted"
                                     ShowHidden="showHidden"
                                     OnTaskAdded="HandleTaskAdded"
                                     OnTaskDeleted="HandleDeleteTask"
                                     OnTaskUpdated="HandleUpdateTask"
                                     OnTaskDragStart="HandleDragStart"
                                     OnTaskDragEnd="HandleDragEnd"
                                     OnTaskDropped="args => HandleDropOnProject(args.targetTaskId, args.position)"
                                     OnTaskCompletedToggle="HandleToggleComplete"
                                     OnTaskDoubleClick="ShowEditModal"
                                     DraggedTaskId="draggedTaskId" />
                }
            }
            else
            {
                <div class="empty-view-message">
                    <i class="bi bi-inbox"></i>
                    <span>
                        @(IsFocusView ? "집중할 작업이 없습니다. 멋진 하루 보내세요! ✨"
                                        : IsContextView ? "이 컨텍스트에 해당하는 작업이 없습니다."
                                        : IsActiveTasksView ? "활성화된 작업이 없습니다. Inbox를 확인하거나 새 작업을 추가하세요! 👍"
                                        : "")
            </span>
        </div>
                }
        </div>
    }

    @if (taskToEdit != null)
    {
        <TaskDetailModal TaskToEdit="taskToEdit"
                         OnSave="HandleSaveTask"
                         OnClose="CloseEditModal" />
    }

    @if (isBulkEditPanelVisible)
    {
        <BulkEditPanel SelectedTaskIds="selectedTaskIds"
                       OnApply="HandleBulkUpdate"
                       OnClose="CloseBulkEditPanel" />
    }

    <BulkActionBar SelectedTaskIds="selectedTaskIds"
                   IsMultiSelectMode="isMultiSelectMode"
                   OnEditClick="OpenBulkEditPanel"
                   OnDeleteClick="HandleDeleteSelected"
                   OnDeselectAllClick="DeselectAll" />

    <UndoSnackbar /> @* <-- 이 한 줄을 추가하세요 *@

</div>

@code {
    private void HandleContainerClick(MouseEventArgs e)
    {
        // JS에서 더 정확하게 처리
    }
}