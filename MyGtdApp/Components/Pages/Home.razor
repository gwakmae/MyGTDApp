@page "/"
@page "/context/{Context}"
@rendermode InteractiveServer

@using MyGtdApp.Models
@using MyGtdApp.Services
@using MyGtdApp.Components.Shared
@using Microsoft.AspNetCore.Components.Web

@using TaskStatus = MyGtdApp.Models.TaskStatus @* ← 충돌 해결 *@
@inject ITaskService TaskService
@inject IJSRuntime JSRuntime @* 👈 1. IJSRuntime 주입 *@

@implements IDisposable
@* IDisposable 인터페이스 구현 *@

<PageTitle>@(string.IsNullOrEmpty(Context) ? "GTD Board" : $"Context: @{Context}")</PageTitle>

@if (string.IsNullOrEmpty(Context))
{
    <div class="main-header">
        <h1>My GTD Board</h1>
    </div>

    <div class="board-container @(draggedTaskId != 0 ? "is-dragging" : "")">

        <div class="board-column today-column">
            <h3 class="column-header">Today</h3>
            <div class="task-list">
                @foreach (var task in todayTasks)
                {
                    <ProjectTaskNode Task="task"
                                     OnTaskAdded="HandleTaskAdded"
                                     OnTaskDeleted="HandleDeleteTask"
                                     OnTaskUpdated="HandleUpdateTask"
                                     OnTaskDragStart="HandleDragStart"
                                     OnTaskDragEnd="HandleDragEnd"
                                     OnTaskDropped="args => HandleDropOnProject(args.targetTaskId, args.position)"
                                     OnTaskCompletedToggle="HandleToggleComplete"
                                     OnTaskDoubleClick="ShowEditModal"
                                     DraggedTaskId="draggedTaskId" />
                }
            </div>
        </div>

        @foreach (var status in (TaskStatus[])Enum.GetValues(typeof(TaskStatus)))
        {
            <div class="board-column @(status == TaskStatus.Projects ? "project-column" : "") @GetColumnDropClass(status)"
                 @ondrop="() => HandleDropOnColumn(status)"
                 @ondragover:preventDefault="true"
                 @ondragover="() => dragOverStatus = status"
                 @ondragleave="() => dragOverStatus = null">

                <h3 class="column-header">@status</h3>

                <div class="task-list">
                    @foreach (var task in GetTasksForStatus(status))
                    {
                        <ProjectTaskNode Task="task"
                                         OnTaskAdded="HandleTaskAdded"
                                         OnTaskDeleted="HandleDeleteTask"
                                         OnTaskUpdated="HandleUpdateTask"
                                         OnTaskDragStart="HandleDragStart"
                                         OnTaskDragEnd="HandleDragEnd"
                                         OnTaskDropped="args => HandleDropOnProject(args.targetTaskId, args.position)"
                                         OnTaskCompletedToggle="HandleToggleComplete"
                                         OnTaskDoubleClick="ShowEditModal"
                                         DraggedTaskId="draggedTaskId" />
                    }
                </div>

                @if (addingTaskStatus == status)
                {
                    <div class="quick-add-container">
                        <input @ref="quickAddInputRef"
                               @bind="newTaskTitle"
                               @onkeyup="(e) => HandleQuickAddKeyUp(e, status)"
                               @onblur="CancelQuickAdd"
                               placeholder="Enter a title..."
                               class="form-control" />
                    </div>
                }
                else
                {
                    <button class="add-task-btn" @onclick="() => ShowQuickAdd(status)">+ Add Task</button>
                }
            </div>
        }
    </div>
}
else
{
    <div class="main-header">
        <h1>Context: @Context</h1> @* 중괄호 두 번 → 한 번 *@
    </div>

    <div class="context-view-container">
        @foreach (var task in contextTasks)
        {
            <ProjectTaskNode Task="task"
                             OnTaskAdded="HandleTaskAdded"
                             OnTaskDeleted="HandleDeleteTask"
                             OnTaskUpdated="HandleUpdateTask"
                             OnTaskDragStart="HandleDragStart"
                             OnTaskDragEnd="HandleDragEnd"
                             OnTaskDropped="args => HandleDropOnProject(args.targetTaskId, args.position)"
                             OnTaskCompletedToggle="HandleToggleComplete"
                             OnTaskDoubleClick="ShowEditModal"
                             DraggedTaskId="draggedTaskId" />
        }
    </div>
}

@if (taskToEdit != null)
{
    <TaskDetailModal TaskToEdit="taskToEdit"
                     OnSave="HandleSaveTask"
                     OnClose="CloseEditModal" />
}

@code
{
    /* ----------------- 파라미터 ----------------- */
    [Parameter] public string? Context { get; set; }

    /* ----------------- 상태 --------------------- */
    private List<TaskItem> allTopLevelTasks = new();
    private List<TaskItem> todayTasks = new();
    private List<TaskItem> contextTasks = new();

    private TaskStatus? dragOverStatus;
    private TaskStatus? addingTaskStatus;
    private int draggedTaskId;
    private TaskItem? taskToEdit;

    private string newTaskTitle = string.Empty;
    private ElementReference quickAddInputRef;

    private DotNetObjectReference<Home>? dotNetHelper; @* 👈 2. JS와 통신할 객체 참조 선언 *@

    /* ----------------- 생명주기 ------------------ */

    protected override async Task OnAfterRenderAsync(bool firstRender) @* 👇 3. OnAfterRenderAsync 생명주기 메서드 추가 *@
    {
        // 컴포넌트가 처음 렌더링된 후에만 실행
        if (firstRender)
        {
            // dotNetHelper 객체를 초기화하고, 이 컴포넌트(this)를 참조하도록 설정
            dotNetHelper = DotNetObjectReference.Create(this);
            // JS의 setup` 함수를 호출하면서, 이 helper 객체를 전달
            await JSRuntime.InvokeVoidAsync("setup", dotNetHelper);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshTasks();
        TaskService.OnChange += HandleDataChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshTasks();
    }

    /* ----------------- 데이터 로딩 --------------- */
    private async Task RefreshTasks()
    {
        if (string.IsNullOrEmpty(Context))
        {
            var allTasks = TaskService.GetAllTasksAsync();
            var today = TaskService.GetTodayTasksAsync();
            await Task.WhenAll(allTasks, today);

            allTopLevelTasks = allTasks.Result;
            todayTasks = today.Result;
        }
        else
        {
            contextTasks = await TaskService.GetTasksByContextAsync($"@{Context}");
        }

        StateHasChanged();
    }

    /* ----------------- Drag & Drop ------------- */
    private List<TaskItem> GetTasksForStatus(TaskStatus status) =>
        allTopLevelTasks.Where(t => t.Status == status)
                        .OrderBy(t => t.SortOrder)
                        .ToList();

    private void HandleDragStart(int id) => draggedTaskId = id;

    private async Task HandleDragEnd()
    {
        if (draggedTaskId == 0) return;
        draggedTaskId = 0;
        await InvokeAsync(StateHasChanged);
    }

    private string GetColumnDropClass(TaskStatus status) =>
        dragOverStatus == status ? "drag-over" : "";

    private async Task HandleDropOnColumn(TaskStatus targetStatus)
    {
        if (draggedTaskId == 0) return;

        var siblings = GetTasksForStatus(targetStatus);
        await TaskService.MoveTaskAsync(draggedTaskId, targetStatus, null, siblings.Count);
        draggedTaskId = 0;
    }

    private async Task HandleDropOnProject(int targetTaskId, ProjectTaskNode.DropIndicator position)
    {
        if (draggedTaskId == 0 || draggedTaskId == targetTaskId) return;

        var targetTask = FindTaskById(allTopLevelTasks, targetTaskId) ??
                         FindTaskById(contextTasks, targetTaskId);
        if (targetTask == null) return;

        var (parentId, sortOrder) = position switch
        {
            ProjectTaskNode.DropIndicator.Inside => (targetTask.Id, targetTask.Children.Count),
            ProjectTaskNode.DropIndicator.Above => (targetTask.ParentId, targetTask.SortOrder),
            ProjectTaskNode.DropIndicator.Below => (targetTask.ParentId, targetTask.SortOrder + 1),
            _ => (null, 0)
        };

        await TaskService.MoveTaskAsync(draggedTaskId, targetTask.Status, parentId, sortOrder);
        draggedTaskId = 0;
    }

    private TaskItem? FindTaskById(IEnumerable<TaskItem> list, int id)
    {
        foreach (var t in list)
        {
            if (t.Id == id) return t;
            var found = FindTaskById(t.Children, id);
            if (found != null) return found;
        }
        return null;
    }

    /* ----------------- Quick-Add --------------- */
    private async Task ShowQuickAdd(TaskStatus status)
    {
        addingTaskStatus = status;
        await Task.Delay(50);
        await quickAddInputRef.FocusAsync();
    }

    private void CancelQuickAdd()
    {
        addingTaskStatus = null;
        newTaskTitle = "";
    }

    private async Task HandleQuickAddKeyUp(KeyboardEventArgs e, TaskStatus status)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newTaskTitle))
        {
            await TaskService.AddTaskAsync(newTaskTitle, status, null);
            newTaskTitle = "";
            await quickAddInputRef.FocusAsync();
        }
        else if (e.Key == "Escape")
        {
            CancelQuickAdd();
        }
    }

    /* -------------- CRUD 핸들러 ---------------- */
    private Task HandleTaskAdded() => Task.CompletedTask;
    private Task HandleUpdateTask() => Task.CompletedTask;

    private async Task HandleToggleComplete(int id)
    {
        await TaskService.ToggleCompleteStatusAsync(id);
    }

    private async Task HandleDeleteTask(int id)
    {
        await TaskService.DeleteTaskAsync(id);
    }

    private void ShowEditModal(int id)
    {
        taskToEdit = FindTaskById(allTopLevelTasks, id) ??
                     FindTaskById(contextTasks, id);
    }

    private async Task HandleSaveTask(TaskItem updated)
    {
        await TaskService.UpdateTaskAsync(updated);
        CloseEditModal();
    }

    private void CloseEditModal() => taskToEdit = null;

    /* -------------- 데이터 변경 알림 ------------ */
    private async void HandleDataChanged()
    {
        await RefreshTasks();
        await InvokeAsync(StateHasChanged);
    }

    /* -------------- IDisposable --------------- */
    public void Dispose()
    {
        TaskService.OnChange -= HandleDataChanged;
        @* 👇 4. 컴포넌트가 소멸될 때 JS 참조도 함께 해제 (메모리 누수 방지) *@
        dotNetHelper?.Dispose();
    }

    [JSInvokable] @* 👇 5. JS에서 호출할 메서드라는 것을 명확히 표시 (기존과 동일하지만 중요) *@
    public async Task HandleDropOnProject(int targetTaskId, string position)
    {
        var pos = position switch
        {
            "Above" => ProjectTaskNode.DropIndicator.Above,
            "Below" => ProjectTaskNode.DropIndicator.Below,
            _ => ProjectTaskNode.DropIndicator.Inside
        };
        await HandleDropOnProject(targetTaskId, pos);
    }
}