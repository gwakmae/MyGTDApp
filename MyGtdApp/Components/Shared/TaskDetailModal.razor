@using MyGtdApp.Models
@using MyGtdApp.Services
@using System.Globalization
@inject ITaskService TaskService
@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<div class="modal-backdrop" @onclick="HandleBackdropClick" @ontouchstart:preventDefault="false" @ontouchend="HandleBackdropTouch">
    <div class="modal-container" @onclick:stopPropagation="true">

        <div class="modal-header">
            <h3>Edit Task Details</h3>
            <button class="close-btn" @onclick="HandleClose">×</button>
        </div>

        <div class="modal-body">
            @if (_localTask != null)
            {
                <form @onsubmit="HandleSave" @onsubmit:preventDefault="true">

                    <TaskDetail_Title @bind-Value="_localTask.Title" OnEnter="HandleSave" />

                    <TaskDetail_Description @bind-Value="_localTask.Description" OnCtrlEnter="HandleSave" />

                    <!-- 🆕 Priority 설정 추가 -->
                    <TaskDetail_Priority @bind-Value="_localTask.Priority" />

                    <TaskDetail_Dates @bind-StartDate="_localTask.StartDate" @bind-DueDate="_localTask.DueDate" />

                    <TaskDetail_Contexts @bind-SelectedContexts="_localTask.Contexts" />

                    <button type="submit" style="display: none;"></button>
                </form>
            }
            else
            {
                <p>Loading...</p>
            }
        </div>

        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="HandleClose">Cancel</button>
            <button class="btn btn-primary" @onclick="HandleSave">Save Changes</button>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public TaskItem TaskToEdit { get; set; } = default!;

    [Parameter]
    public EventCallback<TaskItem> OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private TaskItem? _localTask;

    protected override void OnParametersSet()
    {
        _localTask = new TaskItem
        {
            Id = TaskToEdit.Id,
            Title = TaskToEdit.Title,
            Description = TaskToEdit.Description ?? string.Empty,
            Priority = TaskToEdit.Priority,
            Status = TaskToEdit.Status,
            ParentId = TaskToEdit.ParentId,
            SortOrder = TaskToEdit.SortOrder,
            IsCompleted = TaskToEdit.IsCompleted,
            StartDate = TaskToEdit.StartDate,
            DueDate = TaskToEdit.DueDate,
            Contexts = new List<string>(TaskToEdit.Contexts ?? new List<string>())
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("preventBackgroundScroll", true);
        }
    }

    private async Task HandleSave()
    {
        if (_localTask != null)
        {
            await JSRuntime.InvokeVoidAsync("preventBackgroundScroll", false);
            await OnSave.InvokeAsync(_localTask);
        }
    }

    private async Task HandleClose()
    {
        await JSRuntime.InvokeVoidAsync("preventBackgroundScroll", false);
        await OnClose.InvokeAsync();
    }

    // 🆕 모바일 터치 이벤트 처리 추가
    private async Task HandleBackdropTouch(TouchEventArgs e)
    {
        // 모바일에서 백드롭 터치 시 모달 닫기
        await HandleClose();
    }

    // 🔧 백드롭 클릭 처리 개선
    private async Task HandleBackdropClick()
    {
        try
        {
            var isLargeScreen = await JSRuntime.InvokeAsync<bool>("eval", "window.innerWidth >= 768 && window.innerHeight >= 600");
            if (!isLargeScreen)
            {
                await HandleClose();
            }
        }
        catch
        {
            // JS 호출 실패 시 기본 동작
            await HandleClose();
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("preventBackgroundScroll", false);
        }
        catch (JSDisconnectedException) { }
        catch (Exception ex)
        {
            Console.WriteLine($"모달 해제 중 오류: {ex.Message}");
        }
    }
}
