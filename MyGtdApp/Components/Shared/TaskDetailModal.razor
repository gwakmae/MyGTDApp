@using MyGtdApp.Models
@using MyGtdApp.Services
@using System.Globalization
@inject ITaskService TaskService

<div class="modal-backdrop" @onclick="HandleClose">
    <div class="modal-container" @onclick:stopPropagation="true">

        <div class="modal-header">
            <h3>Edit Task Details</h3>
            <button class="close-btn" @onclick="HandleClose">×</button>
        </div>

        <div class="modal-body">
            @if (_localTask != null)
            {
                <form @onsubmit="HandleFormSubmit" @onsubmit:preventDefault="true">
                    <div class="form-group">
                        <label for="title">Title</label>
                        <input id="title"
                               class="form-control"
                               @bind="_localTask.Title"
                               @onkeyup="HandleTitleKeyUp" />
                    </div>

                    <!-- ✅ Description 필드 -->
                    <div class="form-group">
                        <div class="description-header">
                            <label for="description">Description</label>
                            <div class="description-tools">
                                <button type="button" class="btn-tool" @onclick="ClearDescription" title="Clear">
                                    <i class="bi bi-x-circle"></i>
                                </button>
                            </div>
                        </div>
                        <textarea id="description"
                                  class="form-control description-textarea"
                                  rows="4"
                                  placeholder="Enter detailed description, notes, or checklist..."
                                  maxlength="2000"
                                  @bind="_localTask.Description"
                                  @oninput="OnDescriptionInput"
                                  @onkeydown="HandleDescriptionKeyDown"></textarea>
                        <div class="description-footer">
                            <small class="description-hint">
                                <i class="bi bi-info-circle"></i>
                                Supports multiple lines. Use Ctrl+Enter to save.
                            </small>
                            <div class="description-counter @GetCounterClass()">
                                @(_localTask?.Description?.Length ?? 0) / 2000
                            </div>
                        </div>
                    </div>

                    <div class="date-group">
                        <div class="form-group">
                            <label for="start-date">Start Date</label>
                            <input id="start-date" type="date" class="form-control"
                                   value="@((_localTask != null && _localTask.StartDate.HasValue) ? _localTask.StartDate.Value.ToString("yyyy-MM-dd") : "")"
                                   @onchange="HandleStartDateChange" />
                        </div>
                        <div class="form-group">
                            <label for="due-date">Due Date</label>
                            <input id="due-date" type="date" class="form-control"
                                   value="@((_localTask != null && _localTask.DueDate.HasValue) ? _localTask.DueDate.Value.ToString("yyyy-MM-dd") : "")"
                                   @onchange="HandleDueDateChange" />
                        </div>
                    </div>

                    <!-- 🆕 개선된 Contexts 필드 -->
                    <div class="form-group">
                        <label>Contexts</label>

                        <!-- 기존 컨텍스트 태그들 -->
                        @if (availableContexts.Any())
                        {
                            <div class="context-tags">
                                @foreach (var context in availableContexts)
                                {
                                    <button type="button"
                                            class="context-tag @(IsContextSelected(context) ? "selected" : "")"
                                            @onclick="() => ToggleContext(context)">
                                        @context
                                        @if (IsContextSelected(context))
                                        {
                                            <i class="bi bi-check-circle-fill"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-circle"></i>
                                        }
                                    </button>
                                }
                            </div>
                        }
                        
                        <!-- 새 컨텍스트 추가 -->
                        <div class="new-context-input">
                            <div class="input-group">
                                <input type="text"
                                       class="form-control"
                                       placeholder="Add new context (e.g., @@Work)"
                                       @bind="newContextInput"
                                       @onkeyup="HandleNewContextKeyUp" />
                                <button type="button"
                                        class="btn btn-add-context"
                                        @onclick="AddNewContext"
                                        disabled="@string.IsNullOrWhiteSpace(newContextInput)">
                                    <i class="bi bi-plus-circle-fill"></i>
                                    <span class="btn-add-text">Add</span>
                                </button>
                            </div>
                        </div>

                        <!-- 선택된 컨텍스트 미리보기 -->
                        @if (_localTask?.Contexts?.Any() == true)
                        {
                            <div class="selected-contexts">
                                <small class="text-muted">Selected:</small>
                                @foreach (var context in _localTask.Contexts)
                                {
                                    <span class="selected-context-badge">
                                        @context
                                        <button type="button" class="remove-context" @onclick="() => RemoveContext(context)">
                                            <i class="bi bi-x"></i>
                                        </button>
                                    </span>
                                }
                            </div>
                        }
                    </div>

                    <button type="submit" style="display: none;"></button>
                </form>
            }
            else
            {
                <p>Loading...</p>
            }
        </div>

        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="HandleClose">Cancel</button>
            <button class="btn btn-primary" @onclick="HandleSave">Save Changes</button>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public TaskItem TaskToEdit { get; set; } = default!;

    [Parameter]
    public EventCallback<TaskItem> OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private TaskItem? _localTask;
    private List<string> availableContexts = new();
    private string newContextInput = "";

    // 🔧 수정: async 제거하고 동기로 처리
    protected override void OnParametersSet()
    {
        _localTask = new TaskItem
        {
            Id = TaskToEdit.Id,
            Title = TaskToEdit.Title,
            Description = TaskToEdit.Description ?? string.Empty,
            Priority = TaskToEdit.Priority,
            Status = TaskToEdit.Status,
            ParentId = TaskToEdit.ParentId,
            SortOrder = TaskToEdit.SortOrder,
            IsCompleted = TaskToEdit.IsCompleted,
            StartDate = TaskToEdit.StartDate,
            DueDate = TaskToEdit.DueDate,
            Contexts = new List<string>(TaskToEdit.Contexts ?? new List<string>())
        };

        // 🔧 수정: InvokeAsync로 감싸서 안전하게 비동기 호출
        InvokeAsync(LoadAvailableContexts);
    }

    // 🆕 별도 메서드로 분리
    private async Task LoadAvailableContexts()
    {
        try
        {
            availableContexts = await TaskService.GetAllContextsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"컨텍스트 로드 실패: {ex.Message}");
            availableContexts = new List<string>();
        }
    }

    // 🆕 컨텍스트 관련 메서드들
    private bool IsContextSelected(string context)
    {
        return _localTask?.Contexts?.Contains(context) == true;
    }

    private void ToggleContext(string context)
    {
        if (_localTask?.Contexts == null) return;

        if (_localTask.Contexts.Contains(context))
        {
            _localTask.Contexts.Remove(context);
        }
        else
        {
            _localTask.Contexts.Add(context);
        }
        StateHasChanged();
    }

    private void RemoveContext(string context)
    {
        _localTask?.Contexts?.Remove(context);
        StateHasChanged();
    }

    private async Task HandleNewContextKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newContextInput))
        {
            await AddNewContext();
        }
    }

    private Task AddNewContext()
    {
        if (string.IsNullOrWhiteSpace(newContextInput) || _localTask?.Contexts == null)
            return Task.CompletedTask;

        var context = newContextInput.Trim();

        // @ 붙이기 (없으면)
        if (!context.StartsWith("@"))
        {
            context = "@" + context;
        }

        // 중복 체크
        if (!_localTask.Contexts.Contains(context))
        {
            _localTask.Contexts.Add(context);

            // 사용 가능한 컨텍스트 목록에도 추가
            if (!availableContexts.Contains(context))
            {
                availableContexts.Add(context);
                availableContexts.Sort();
            }
        }

        newContextInput = "";
        StateHasChanged();
        return Task.CompletedTask;
    }

    // 기존 메서드들...
    private async Task HandleTitleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleSave();
        }
    }

    private async Task HandleDescriptionKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && e.CtrlKey)
        {
            await HandleSave();
        }
        else if (e.Key == "Escape")
        {
            await HandleClose();
        }
    }

    private void HandleStartDateChange(ChangeEventArgs e)
    {
        if (_localTask != null)
        {
            _localTask.StartDate = !string.IsNullOrEmpty(e.Value?.ToString())
                ? DateTime.Parse(e.Value.ToString()!)
                : null;
        }
    }

    private void HandleDueDateChange(ChangeEventArgs e)
    {
        if (_localTask != null)
        {
            _localTask.DueDate = !string.IsNullOrEmpty(e.Value?.ToString())
                ? DateTime.Parse(e.Value.ToString()!)
                : null;
        }
    }

    private async Task HandleFormSubmit()
    {
        await HandleSave();
    }

    private async Task HandleSave()
    {
        if (_localTask != null)
        {
            await OnSave.InvokeAsync(_localTask);
        }
    }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync();
    }

    private void OnDescriptionInput(ChangeEventArgs e)
    {
        if (_localTask != null)
        {
            _localTask.Description = e.Value?.ToString() ?? "";
            StateHasChanged();
        }
    }

    private void ClearDescription()
    {
        if (_localTask != null)
        {
            _localTask.Description = "";
            StateHasChanged();
        }
    }

    private string GetCounterClass()
    {
        var length = _localTask?.Description?.Length ?? 0;
        if (length > 1800) return "danger";
        if (length > 1500) return "warning";
        return "";
    }
}
