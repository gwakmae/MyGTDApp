@using MyGtdApp.Models
@using System.Globalization

<div class="modal-backdrop" @onclick="HandleClose">
    <div class="modal-container" @onclick:stopPropagation="true">

        <div class="modal-header">
            <h3>Edit Task Details</h3>
            <button class="close-btn" @onclick="HandleClose">×</button>
        </div>

        <div class="modal-body">
            @if (_localTask != null)
            {
                <form @onsubmit="HandleFormSubmit" @onsubmit:preventDefault="true">
                    <div class="form-group">
                        <label for="title">Title</label>
                        <input id="title"
                               class="form-control"
                               @bind="_localTask.Title"
                               @onkeyup="HandleTitleKeyUp" />
                    </div>

                    <!-- ✅ Description 필드 -->
                    <div class="form-group">
                        <div class="description-header">
                            <label for="description">Description</label>
                            <div class="description-tools">
                                <button type="button" class="btn-tool" @onclick="ClearDescription" title="Clear">
                                    <i class="bi bi-x-circle"></i>
                                </button>
                            </div>
                        </div>
                        <textarea id="description"
                                  class="form-control description-textarea"
                                  rows="4"
                                  placeholder="Enter detailed description, notes, or checklist..."
                                  maxlength="2000"
                                  @bind="_localTask.Description"
                                  @oninput="OnDescriptionInput"
                                  @onkeydown="HandleDescriptionKeyDown"></textarea>
                        <div class="description-footer">
                            <small class="description-hint">
                                <i class="bi bi-info-circle"></i>
                                Supports multiple lines. Use Ctrl+Enter to save.
                            </small>
                            <div class="description-counter @GetCounterClass()">
                                @(_localTask?.Description?.Length ?? 0) / 2000
                            </div>
                        </div>
                    </div>

                    <div class="date-group">
                        <div class="form-group">
                            <label for="start-date">Start Date</label>
                            <input id="start-date" type="date" class="form-control"
                                   value="@((_localTask != null && _localTask.StartDate.HasValue) ? _localTask.StartDate.Value.ToString("yyyy-MM-dd") : "")"
                                   @onchange="HandleStartDateChange" />
                        </div>
                        <div class="form-group">
                            <label for="due-date">Due Date</label>
                            <input id="due-date" type="date" class="form-control"
                                   value="@((_localTask != null && _localTask.DueDate.HasValue) ? _localTask.DueDate.Value.ToString("yyyy-MM-dd") : "")"
                                   @onchange="HandleDueDateChange" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="contexts">Contexts <small>(comma separated)</small></label>
                        <input id="contexts"
                               class="form-control"
                               placeholder="e.g. @@Home, @@Work"
                               @bind="ContextsString"
                               @onkeyup="HandleContextsKeyUp" />
                    </div>

                    <button type="submit" style="display: none;"></button>
                </form>
            }
            else
            {
                <p>Loading...</p>
            }
        </div>

        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="HandleClose">Cancel</button>
            <button class="btn btn-primary" @onclick="HandleSave">Save Changes</button>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public TaskItem TaskToEdit { get; set; } = default!;

    [Parameter]
    public EventCallback<TaskItem> OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private TaskItem? _localTask;

    protected override void OnParametersSet()
    {
        _localTask = new TaskItem
        {
            Id = TaskToEdit.Id,
            Title = TaskToEdit.Title,
            Description = TaskToEdit.Description ?? string.Empty, // null 방어
            Priority = TaskToEdit.Priority,
            Status = TaskToEdit.Status,
            ParentId = TaskToEdit.ParentId,
            SortOrder = TaskToEdit.SortOrder,
            IsCompleted = TaskToEdit.IsCompleted,
            StartDate = TaskToEdit.StartDate,
            DueDate = TaskToEdit.DueDate,
            Contexts = new List<string>(TaskToEdit.Contexts ?? new List<string>()) // null 방어
        };
    }

    // Title 입력 필드용 키 핸들러
    private async Task HandleTitleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleSave();
        }
    }

    // Contexts 입력 필드용 키 핸들러
    private async Task HandleContextsKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleSave();
        }
    }

    // Description textarea용 키 핸들러
    private async Task HandleDescriptionKeyDown(KeyboardEventArgs e)
    {
        // Ctrl+Enter로 저장
        if (e.Key == "Enter" && e.CtrlKey)
        {
            await HandleSave();
        }
        // Esc로 취소
        else if (e.Key == "Escape")
        {
            await HandleClose();
        }
    }

    // 날짜 변경 핸들러들 (null 안전)
    private void HandleStartDateChange(ChangeEventArgs e)
    {
        if (_localTask != null)
        {
            _localTask.StartDate = !string.IsNullOrEmpty(e.Value?.ToString())
                ? DateTime.Parse(e.Value.ToString()!)
                : null;
        }
    }

    private void HandleDueDateChange(ChangeEventArgs e)
    {
        if (_localTask != null)
        {
            _localTask.DueDate = !string.IsNullOrEmpty(e.Value?.ToString())
                ? DateTime.Parse(e.Value.ToString()!)
                : null;
        }
    }

    // form submit 처리 메서드
    private async Task HandleFormSubmit()
    {
        await HandleSave();
    }

    private async Task HandleSave()
    {
        if (_localTask != null)
        {
            await OnSave.InvokeAsync(_localTask);
        }
    }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync();
    }

    private string ContextsString
    {
        get => _localTask != null ? string.Join(", ", _localTask.Contexts ?? new List<string>()) : "";
        set
        {
            if (_localTask != null)
            {
                _localTask.Contexts = string.IsNullOrWhiteSpace(value)
                    ? new List<string>()
                    : value.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
            }
        }
    }

    // Description 실시간 업데이트
    private void OnDescriptionInput(ChangeEventArgs e)
    {
        if (_localTask != null)
        {
            _localTask.Description = e.Value?.ToString() ?? "";
            StateHasChanged();
        }
    }

    // Description 내용 지우기
    private void ClearDescription()
    {
        if (_localTask != null)
        {
            _localTask.Description = "";
            StateHasChanged();
        }
    }

    // 글자 수에 따른 카운터 스타일
    private string GetCounterClass()
    {
        var length = _localTask?.Description?.Length ?? 0;
        if (length > 1800) return "danger";
        if (length > 1500) return "warning";
        return "";
    }
}
