@using MyGtdApp.Models
@using Microsoft.AspNetCore.Components.Web

@* 🔧 더블클릭 및 터치 이벤트 완전 개선 *@
<div class="task-card-content @(Task.IsCompleted ? "is-completed" : "") @DueDateClass"
     @ondblclick="HandleDoubleClick"
     @ondblclick:preventDefault="true"
     @ondblclick:stopPropagation="true">

    @* ▼ [수정] 기존 <i> 태그를 <button>으로 감싸 터치 영역을 넓히고 의미를 명확히 합니다. *@
    <button type="button"
            class="task-checkbox-btn"
            @onclick="HandleCheckboxClick"
            @onclick:stopPropagation="true">
        <i class="bi @(Task.IsCompleted ? "bi-check-square" : "bi-square") task-checkbox"></i>
    </button>

    <span class="task-title">@Task.Title</span>

    <button class="action-btn simple-delete"
            @onclick="HandleDeleteClick"
            @onclick:stopPropagation="true"
            title="Delete Task">
        ×
    </button>
</div>

@code {
    [Parameter, EditorRequired]
    public TaskItem Task { get; set; } = default!;

    [Parameter]
    public EventCallback<int> OnTaskDeleted { get; set; }

    [Parameter]
    public EventCallback<int> OnTaskCompletedToggle { get; set; }

    [Parameter]
    public EventCallback<int> OnTaskDoubleClick { get; set; }

    // 마감일 상태에 따라 CSS 클래스를 반환하는 도우미 속성
    private string DueDateClass
    {
        get
        {
            if (Task.IsCompleted || !Task.DueDate.HasValue) return "";

            var today = DateTime.Today;
            if (Task.DueDate.Value.Date < today) return "is-overdue";
            if (Task.DueDate.Value.Date == today) return "is-due-today";
            return "";
        }
    }

    // 🆕 데스크탑 더블클릭 핸들러
    private Task HandleDoubleClick()
    {
        Console.WriteLine($"[TASKCARD] 더블클릭 감지: Task {Task.Id}");
        return OnTaskDoubleClick.InvokeAsync(Task.Id);
    }

    private Task HandleCheckboxClick()
    {
        return OnTaskCompletedToggle.InvokeAsync(Task.Id);
    }

    private Task HandleDeleteClick()
    {
        return OnTaskDeleted.InvokeAsync(Task.Id);
    }
}
