@using MyGtdApp.Services
@inject ITaskService TaskService
@implements IDisposable

<div class="navmenu">
    <nav class="nav flex-column">
        <div class="nav-section-header">Views</div>
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            <span class="bi bi-grid-fill" aria-hidden="true"></span> GTD Board
        </NavLink>
        
        @* 🆕 추가: Focus View 링크 *@
        <NavLink class="nav-link" href="focus">
            <span class="bi bi-stars" aria-hidden="true"></span> Focus
        </NavLink>

        <div class="nav-section-header">Contexts</div>
        @if (allContexts.Any())
        {
            @foreach (var context in allContexts)
            {
                <NavLink class="nav-link" href="@($"/context/{context.Replace("@", "")}")">
                    <span class="bi bi-tag-fill" aria-hidden="true"></span> @context
                </NavLink>
            }
        }
        else
        {
            <span class="nav-link-text">No contexts yet.</span>
        }
    </nav>
</div>

@code {
    private List<string> allContexts = new();

    protected override async Task OnInitializedAsync()
    {
        TaskService.OnChange += HandleDataChange;
        await LoadContexts();
    }

    // 🔧 수정: async 키워드 추가 및 에러 처리 강화
    private async void HandleDataChange()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                await LoadContexts();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"NavMenu 업데이트 중 오류: {ex.Message}");
        }
    }

    // 🆕 추가: 강제 새로고침 메서드
    [JSInvokable]
    public async Task RefreshContexts()
    {
        await LoadContexts();
        StateHasChanged();
    }

    private async Task LoadContexts()
    {
        try
        {
            var contexts = await TaskService.GetAllContextsAsync();
            // 🔧 수정: 참조 비교로 불필요한 업데이트 방지
            if (!contexts.SequenceEqual(allContexts))
            {
                allContexts = contexts;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"컨텍스트 로드 중 오류: {ex.Message}");
            allContexts = new List<string>();
        }
    }

    public void Dispose()
    {
        TaskService.OnChange -= HandleDataChange;
    }
}